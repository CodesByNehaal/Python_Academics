# -*- coding: utf-8 -*-
"""626_F1_PRACTICAL 7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HHCWyKUz7hjNYIMA9yHlZt5By43COZuL
"""

#NAME : NEHAAL ANIL PANDEY
#ROLL NO. : 626
#DATE : 10/06/2021.

#PROGRAM 7.1 : 1. Solve the Fibonacci sequence using recursive function in Python.

#INPUT
def recursion_fib(n):                                      #defining a function
   if n <= 1:                                              #exit condition. if n <=1, return n.
       return n
   else:                                                   #else, recall the function again(recursion.)
       return(recursion_fib(n-1) + recursion_fib(n-2))     #add two previous terms and return the value. 0 
    
terms = int(input("ENTER THE NO. OF TERMS YOU WANT : "))   #taking no. of terms from user as input.
print("Fibonacci sequence:")
for i in range(0, terms):                                  #using for loop, traversing the value of i from 0 to terms and calling the function.
       print(recursion_fib(i), end=(" "))
        

#OUTPUT
#ENTER THE NO. OF TERMS YOU WANT : 15
#Fibonacci sequence:
#0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 



#PROGRAM 7.2 : WAP to calculate factorial of an input number. Sample O/P:- 5*4*3*2*1=120

#INPUT

def recursion_fact(n):                            #defining the function.
   if n == 1:                                     #if n=1, return 1.
       return n 
   else:                                          #else, recall the function and perform n*n-1*n-2*....
       return n*recursion_fact(n-1)

num = int(input("ENTER A POSITIVE INTEGER : ")) #taking a number.

if num == 0:                                    #if the entered value is 0, its factorial is 1.
   print("The factorial of 0 is 1")
else:                                           #else, using loop, setting the desired output and calling the function.
   for i in range(num,1,-1):
    print(i,"*", end=" ")
   for i in range(1,0,-1):
    print(i, end=" ")
   print("=", recursion_fact(num))


#OUTPUT 
#ENTER A POSITIVE INTEGER : 8
#8 * 7 * 6 * 5 * 4 * 3 * 2 * 1 = 40320



#PROGRAM 7.3 : 3. WAP to print first 50 natural numbers using recursion.

#INPUT 
def recursion_nat(n):              #defining the function.
    if n<=50:                      #if condition true, print n. and recall function again by incrementing n by 1. 
        print(n,end=" ")    
        recursion_nat(n+1)
        
    else:                          #else, return 0.                
        return 0
    
n = 1 #initialising n to 1.
print("THE FIRST 50 NATURAL NUMBERS ARE : ")
recursion_nat(n) #function call.


#OUTPUT
#THE FIRST 50 NATURAL NUMBERS ARE : 
#1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50



PROGRAM 7.4 : WAP to calculate the sum of numbers from 1 to n using recursion.
    
#INPUT 
def recursion_sum(n):                            #defining the function.
   if n <= 1:             #if statement is true, return n.
       return n
   else:                  #else, recall function to return n+(n-1)+(n-2)+...
       return n + recursion_sum(n-1)

num = int(input("ENTER THE VALUE OF n = "))  #taking value of n by user and passing itto the function while function call.
print("The sum =",recursion_sum(num))


#OUTPUT : 
#ENTER THE VALUE OF n = 626
#The sum = 196251



#PRACTICAL 7.5 : WAP to print the list elements using recursion.
#INPUT

def recursion_list(elements,i=0):              #defining a function.
    if i < len(elements):                      #if the condition holds true, print the ith index element. and recall the function again by itirating i by 1.
        print(elements[i], end=" ")
        recursion_list(elements, i+1)
    else:
        return 0                              #else, return 0.
    
list = []   #defining a list.
n = int(input("ENTER THE NUMBER OF ELEMENTS : ")) #taking no. of elements in the list by user.
for i in range(0,n):
    item = (input("ENTER ELEMENT = ")) #using for loop, appending elements to the list.
    list.append(item)
    
print("THE ELEMENTS OF THE LIST IS : ") 
recursion_list(list)                         #function calling.


#OUTPUT
#ENTER THE NUMBER OF ELEMENTS : 5
#ENTER ELEMENT = hello
#ENTER ELEMENT = mitaoe
#ENTER ELEMENT = 626
#ENTER ELEMENT = F1
#ENTER ELEMENT = bye
#THE ELEMENTS OF THE LIST IS : 
#hello mitaoe 626 F1 bye 



#practical 7.6 : WAP to get the largest element of a list using recursion.

#input

batch=[]
def recursion_big(batch,item,big):     #Defining function for finding greatest number in list.
    if(item == 0):                     #if only 1 term entered by user, return it as greatest.
        return big  
    elif (item > 0):                   #else if more than 2, perform next if else statement.
        if batch[item] > big:          #if the last index greater than first index element(big), 
            big = batch[item]          #move last index element in variable big.
        else:                          #else, recall the function and make it traverse through all the elements. 
            return recursion_big(batch, item-1, big)
    
    
items=int(input("Enter the number of elements in the list: "))  #no. of elements from user.
for i in range(0,items):                                        #using for loop, taking the element values from user and append it in the list batch.
    elements=int(input("Enter the number elements:  "))         
    batch.append(elements)  
big = batch[0]             #temporarily store 0th index element in big variable.
print ("THE GREATEST ELEMENT IN THE BATCH = ",recursion_big(batch,items-1,big)) #printing the value returned by function.


#OUTPUT
#Enter the number of elements in the list: 3
#Enter the number elements:  34354
#Enter the number elements:  43
#Enter the number elements:  3
#THE GREATEST ELEMENT IN THE BATCH =  34354



#PRACTICAL 7.7 : WAP to find the first capital letter in a string using recursion.

#INPUT
def recursion_caps(string,length,letter,i=0): #FUNCTION DEFINATION WITH PARAMETERS.
    if(length==0):                            #IF string length is 1, return the letter(0th index element).
        return letter
    elif(i<length):                           #else if, i < length, execute next if else statement.
        if(string[i]>=chr(65) and string[i]<=chr(90)): #if the ascii code of the letter is between 65 and 90, return the letter or else recall the function.
            return string[i]
        else:
            return recursion_caps(string,length,letter,i+1)
            
batch = []
str=input("ENTER A STRING : ")               #taking a string from user.
for i in range(0,length):                    #using for loop, appending the string in a list letter by letter.
    letter1=str[i]
    batch.append(letter1)
letter = batch[0]                            #store 0th index element in letter.
print ("THE FIRST CAPITAL IS ",recursion_caps(batch,len(str)-1,letter)) #function call.


#OUTPUT
#ENTER A STRING : nehaal pandeY
#THE FIRST CAPITAL IS Y
